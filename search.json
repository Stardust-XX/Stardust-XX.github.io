[{"title":"Introduction to CryptoHack","url":"/2023/07/14/Introduction-to-Cryptohack/","content":"这大概算是我的第一篇博客吧，想通过写博客来记录自己学习的过程，方便自己回顾或者帮助之后的初学者。\n作为CTF初学者，目前最感兴趣且希望深入研究的是密码学-Crypto，校内的学长向我推荐了CryptoHack这个网站，有许多类似闯关的教程，接下来打算以此网站入门Crypto.\n\n\nFinding Flags\nEach challenge is designed to help introduce you to a new piece of cryptography. Solving a challenge will require you to find a “flag”.\nThese flags will usually be in the format crypto&#123;y0ur_f1rst_fl4g&#125;. The flag format helps you verify that you found the correct solution.\nTry submitting this flag into the form below to solve your first challenge.\n\n第一道没什么好说的，介绍了CTF解题是要找出flag。这里flag已经给出，输入便可通关。\nGreat Snakes\nModern cryptography involves code, and code involves coding. CryptoHack provides a good opportunity to sharpen your skills.\nOf all modern programming languages, Python 3 stands out as ideal for quickly writing cryptographic scripts and attacks. For more information about why we think Python is so great for this, please see the FAQ.\nRun the attached Python script and it will output your flag.\nChallenge files: - great_snakes.py\nResources: - Downloading Python\n\n第二道题则是介绍了Crypto解题需要的工具：Python.\n我们打开附件\nimport sys# import thisif sys.version_info.major == 2:    print(&quot;You are running Python 2, which is no longer supported. Please update to Python 3.&quot;)ords = [81, 64, 75, 66, 70, 93, 73, 72, 1, 92, 109, 2, 84, 109, 66, 75, 70, 90, 2, 92, 79]print(&quot;Here is your flag:&quot;)print(&quot;&quot;.join(chr(o ^ 0x32) for o in ords))\n\n直接运行即可得到flag：crypto{z3n_0f_pyth0n}\nASCII\nASCII is a 7-bit encoding standard which allows the representation of text using the integers 0-127.\nUsing the below integer array, convert the numbers to their corresponding ASCII characters to obtain a flag.\n[99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]\n\n\nIn Python, the chr() function can be used to convert an ASCII ordinal number to a character (the ord() function does the opposite).\n\n第三题介绍了ASCII码以及Python中的相关函数。\n我们进入Python写一段脚本\narray = [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]for i in range (len(array)):    print(chr(array[i]),end=&#x27;&#x27;)\n\n运行可得到flag：crypto{ASCII_pr1nt4bl3}\nHex\nWhen we encrypt something the resulting ciphertext commonly has bytes which are not printable ASCII characters. If we want to share our encrypted data, it’s common to encode it into something more user-friendly and portable across different systems.\nHexadecimal can be used in such a way to represent ASCII strings. First each letter is converted to an ordinal number according to the ASCII table (as in the previous challenge). Then the decimal numbers are converted to base-16 numbers, otherwise known as hexadecimal. The numbers can be combined together, into one long hex string.\nIncluded below is a flag encoded as a hex string. Decode this back into bytes to get the flag.\n63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d\n\n\n  In Python, the bytes.fromhex() function can be used to convert hex to bytes. The .hex() instance method can be called on byte strings to get the hex representation.\n\n第四题介绍了Hex，即16进制数。\n在Python中可以使用bytes.fromhex()和.hex()实现bytes类型与hex类型的转换。\n依旧是使用Python\nh=&#x27;63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d&#x27;b=bytes.fromhex(h)print(b)\n\n运行可得到flag：crypto{You_will_be_working_with_hex_strings_a_lot}\nBase64\nAnother common encoding scheme is Base64, which allows us to represent binary data as an ASCII string using an alphabet of 64 characters. One character of a Base64 string encodes 6 binary digits (bits), and so 4 characters of Base64 encode three 8-bit bytes.\nBase64 is most commonly used online, so binary data such as images can be easily included into HTML or CSS files.\nTake the below hex string, decode it into bytes and then encode it into Base64.\n72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf\n\n\n\n In Python, after importing the base64 module with import base64, you can use the base64.b64encode() function. Remember to decode the hex first as the challenge description states.\n\n第五题介绍了另一个常用的编码：Base64. Base64使用一个64个字符的密码表，即\n\nBase64中1个字符编码6个二进制数字，4个字符编码3个8位字节。\n这道题的题目要求很明确，让我们解码为bytes类型再编码为Base64类型。\n代码如下\nimport base64h=&#x27;72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf&#x27;b=bytes.fromhex(h)b64=base64.b64encode(b)print(b64)\n\nBytes and Big Integers\nCryptosystems like RSA works on numbers, but messages are made up of characters. How should we convert our messages into numbers so that mathematical operations can be applied?\nThe most common way is to take the ordinal bytes of the message, convert them into hexadecimal, and concatenate. This can be interpreted as a base-16&#x2F;hexadecimal number, and also represented in base-10&#x2F;decimal.\nTo illustrate:\n\n message: HELLO ascii bytes: [72, 69, 76, 76, 79] hex bytes: [0x48, 0x45, 0x4c, 0x4c, 0x4f] base-16: 0x48454c4c4f base-10: 310400273487\n\nConvert the following integer back into a message:\n11515195063862318899931685488813747395775516287289682636499965282714637259206269\n\n\nPython’s PyCryptodome library implements this with the methods bytes_to_long() and long_to_bytes(). You will first have to install PyCryptodome and import it with from Crypto.Util.number import *. \n\n第六题介绍了bytes与大整数之间的换算，这在后面的RSA加密中也会用到。转换的具体步骤题目中也已经列出，不过我们实际计算只需要一段简单的代码\nfrom Crypto.Util.number import *print(long_to_bytes(11515195063862318899931685488813747395775516287289682636499965282714637259206269))\n\n运行可得到flag：crypto{3nc0d1n6_4ll_7h3_w4y_d0wn}\n","categories":["CTF"],"tags":["Crypto"]}]